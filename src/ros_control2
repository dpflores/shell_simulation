#!/usr/bin/env python
#
# Copyright (c) 2017 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
# Copyright (c) 2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
"""
Welcome to CARLA ROS manual control.

Use ARROWS or WASD keys for control.

    W            : throttle
    S            : brake
    AD           : steer
    Q            : toggle reverse
    Space        : hand-brake
    P            : toggle autopilot
    M            : toggle manual transmission
    ,/.          : gear up/down
    B            : toggle manual control

    F1           : toggle HUD
    H/?          : toggle help
    ESC          : quit
"""


from __future__ import print_function
from __future__ import division

import sys
import os
import argparse
import logging
import time
import csv
#import matplotlib.pyplot as plt
import control.controller2d as controller2d
import configparser 
import control.live_plotter as lv   # Custom live plotting library

import datetime
import math
from threading import Thread

import numpy as np
from transforms3d.euler import quat2euler

from tf.transformations import euler_from_quaternion, quaternion_from_euler

import ros_compatibility as roscomp
from ros_compatibility.node import CompatibleNode
from ros_compatibility.qos import QoSProfile, DurabilityPolicy

from carla_msgs.msg import CarlaStatus
from carla_msgs.msg import CarlaEgoVehicleInfo




from std_msgs.msg import Bool

#Control msg
from carla_msgs.msg import CarlaEgoVehicleControl

#Sensors msgs
from carla_msgs.msg import CarlaCollisionEvent
from sensor_msgs.msg import Image
from sensor_msgs.msg import CameraInfo
from sensor_msgs.msg import NavSatFix
from sensor_msgs.msg import Imu
from carla_msgs.msg import CarlaLaneInvasionEvent
from nav_msgs.msg import Odometry
from sensor_msgs.msg import CompressedImage
from std_msgs.msg import Float32  #Speedometer
from carla_msgs.msg import CarlaEgoVehicleStatus
from sensor_msgs.msg import PointCloud2 #Lidar vlp16

from rosgraph_msgs.msg import Clock

#Publisher msg

from std_msgs.msg import Float64
from std_msgs.msg import String
from std_msgs.msg import Bool




#PLOTTING

PLOTTING = True


"""
Configurable params
"""
ITER_FOR_SIM_TIMESTEP  = 150     # no. iterations to compute approx sim timestep
WAIT_TIME_BEFORE_START = 1.00   # game seconds (time before controller start)
TOTAL_RUN_TIME         = 100.00 # game seconds (total runtime before sim end)
TOTAL_FRAME_BUFFER     = 300    # number of frames to buffer after total runtime
NUM_PEDESTRIANS        = 0      # total number of pedestrians to spawn
NUM_VEHICLES           = 2      # total number of vehicles to spawn
SEED_PEDESTRIANS       = 0      # seed for pedestrian spawn randomizer
SEED_VEHICLES          = 0      # seed for vehicle spawn randomizer
CLIENT_WAIT_TIME       = 3      # wait time for client before starting episode
                                # used to make sure the server loads
                                # consistently



PLAYER_START_INDEX = 1      # spawn index for player (keep to 1)
FIGSIZE_X_INCHES   = 8      # x figure size of feedback in inches
FIGSIZE_Y_INCHES   = 8      # y figure size of feedback in inches
PLOT_LEFT          = 0.1    # in fractions of figure width and height
PLOT_BOT           = 0.1    
PLOT_WIDTH         = 0.8
PLOT_HEIGHT        = 0.8

WAYPOINTS_FILENAME = '/home/carlasim/TesisDD/carla-ros-bridge/catkin_ws/src/shell_simulation/src/shell_waypoints.txt'  # waypoint file to load
DIST_THRESHOLD_TO_LAST_WAYPOINT = 2.0  # some distance from last position before
                                       # simulatio1 ends

# Path interpolation parameters
INTERP_MAX_POINTS_PLOT    = 10   # number of points used for displaying
                                 # lookahead path
INTERP_LOOKAHEAD_DISTANCE = 20   # lookahead in meters
INTERP_DISTANCE_RES       = 0.01 # distance between interpolated points

# controller output directory
CONTROLLER_OUTPUT_FOLDER = os.path.dirname(os.path.realpath(__file__)) +\
                           'src/control/controller_output'


global x_glob, y_glob, z_glob
global roll_glob, pitch_glob, yaw_glob
global speed_glob

global sim_time_glob
# CAMBIAR ESTO DE ACUERDO AL MAPA
x_glob, y_glob, z_glob = 29.22999954,-16.000023,0
roll_glob, pitch_glob, yaw_glob = 180,180,0
sim_time_glob=0
speed_glob=0

# ==============================================================================
# -- World ---------------------------------------------------------------------
# ==============================================================================



class ShellVehicle(CompatibleNode):
    """
    defining the vehicle
    """

    def __init__(self):
        super(ShellVehicle, self).__init__("ShellVehicle")
        self._surface = None
        self.role_name = self.get_param("role_name", "ego_vehicle")
        self.controller = ShellControl(self.role_name, self)

        
        #Collision
        self.collision_subscriber = self.new_subscription(
            CarlaCollisionEvent, "/carla/{}/collision".format(self.role_name),
            self.on_collision, qos_profile=10)

        #Clock
        self.clock_subscriber = self.new_subscription(
            Clock, "/clock",
            self.on_clock, qos_profile=10)
            
        #Odometry   
        self.odometry_subscriber = self.new_subscription(
            Odometry, "/carla/{}/odometry".format(self.role_name),
            self.on_odometry, qos_profile=10)
        '''
        #Depth Image
        self.depth_image_subscriber = self.new_subscription(
            Image, "/carla/{}/depth_middle/image".format(self.role_name),
            self.on_depth_image, qos_profile=10)
        
        #Depth Info
        self.depth_info_subscriber = self.new_subscription(
            CameraInfo, "/carla/{}/depth_middle/camera_info".format(self.role_name),
            self.on_depth_info, qos_profile=10)
        
        #GNSS
        self.gnss_subscriber = self.new_subscription(
            NavSatFix, "/carla/{}/gnss".format(self.role_name),
            self.on_gnss, qos_profile=10)

        #IMU
        self.imu_subscriber = self.new_subscription(
            Imu, "/carla/{}/imu".format(self.role_name),
            self.on_imu, qos_profile=10)

        #Lane Invasion    
        self.lane_invasion_subscriber = self.new_subscription(
            CarlaLaneInvasionEvent, "/carla/{}/lane_invasion".format(self.role_name),
            self.on_lane_invasion, qos_profile=10)

        

        #Camera Image
        self.camera_image_subscriber = self.new_subscription(
            CompressedImage, "/carla/{}/rgb_front/image/compressed".format(self.role_name),
            self.on_camera_image, qos_profile=10)

        #Speedometer
        self.speedometer_subscriber = self.new_subscription(
            Float32, "/carla/{}/speedometer".format(self.role_name),
            self.on_speedometer, qos_profile=10)
        
        #Vehicle Status
        self.vehicle_status_subscriber = self.new_subscription(
            CarlaEgoVehicleStatus, "/carla/{}/vehicle_status".format(self.role_name),
            self.on_vehicle_status, qos_profile=10)

        #Vlp16_1 (Lidar)
        self.lidar_subscriber = self.new_subscription(
            PointCloud2, "/carla/{}/vlp16_1".format(self.role_name),
            self.on_lidar, qos_profile=10)
        '''


    def on_collision(self, data):
        """
        Callback on collision event
        """
        
        intensity = math.sqrt(data.normal_impulse.x**2 +
                              data.normal_impulse.y**2 + data.normal_impulse.z**2)

    def on_lane_invasion(self, data):
        """
        Callback on lane invasion event
        """
        text = []
        for marking in data.crossed_lane_markings:
            if marking is CarlaLaneInvasionEvent.LANE_MARKING_OTHER:
                text.append("Other")
            elif marking is CarlaLaneInvasionEvent.LANE_MARKING_BROKEN:
                text.append("Broken")
            elif marking is CarlaLaneInvasionEvent.LANE_MARKING_SOLID:
                text.append("Solid")
            else:
                text.append("Unknown ")


    def on_odometry(self, data):
        """
        Callback on collision event
        """
        global x_glob, y_glob, z_glob
        global roll_glob, pitch_glob, yaw_glob
        global speed_glob
        x_glob = data.pose.pose.position.x
        y_glob = data.pose.pose.position.y
        z_glob = data.pose.pose.position.y

        orientation_q = data.pose.pose.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll_glob, pitch_glob, yaw_glob) = euler_from_quaternion(orientation_list)
        #print(yaw_glob)

        speed_glob = (data.twist.twist.linear.x**2 + data.twist.twist.linear.y**2 )**(1/2)
        
        

    def on_camera_image(self, image):
        """
        Callback when receiving a camera image
        """
        array = np.frombuffer(image.data, dtype=np.dtype("uint8"))
        array = np.reshape(array, (image.height, image.width, 4))
        array = array[:, :, :3]
        array = array[:, :, ::-1]
        
    def on_clock(self, data):
        """
        Callback on collision event
        """
        global sim_time_glob
        sim_time_glob = data.clock.secs
        



class Timer(object):
    """ Timer Class
    
    The steps are used to calculate FPS, while the lap or seconds since lap is
    used to compute elapsed time.
    """
    def __init__(self, period):
        self.step = 0
        self._lap_step = 0
        self._lap_time = time.time()
        self._period_for_lap = period

    def tick(self):
        self.step += 1

    def has_exceeded_lap_period(self):
        if self.elapsed_seconds_since_lap() >= self._period_for_lap:
            return True
        else:
            return False

    def lap(self):
        self._lap_step = self.step
        self._lap_time = time.time()

    def ticks_per_second(self):
        return float(self.step - self._lap_step) /\
                     self.elapsed_seconds_since_lap()

    def elapsed_seconds_since_lap(self):
        return time.time() - self._lap_time




# ==============================================================================
# -- ShellControl -----------------------------------------------------------
# ==============================================================================


class ShellControl(object):
    """
    Handle Control
    """

    def __init__(self, role_name, node):
        self.role_name = role_name

        self.node = node

        self._autopilot_enabled = False
        self._control = CarlaEgoVehicleControl()
        self._steer_cache = 0.0
        

        
        fast_qos = QoSProfile(depth=10)

        self.auto_pilot_enable_publisher = self.node.new_publisher(
            Bool,
            "/carla/{}/enable_autopilot".format(self.role_name),
            qos_profile=fast_qos)


        self.vehicle_control_publisher = self.node.new_publisher(
            CarlaEgoVehicleControl,
            "/carla/{}/vehicle_control_cmd".format(self.role_name),
            qos_profile=fast_qos)

        # self.carla_status_subscriber = self.node.new_subscription(
        #     CarlaStatus,
        #     "/carla/status",
        #     self._on_new_carla_frame,
        #     qos_profile=10)


        self.set_autopilot(self._autopilot_enabled)

    def send_control(self, throttle, steer, brake):
        """Send the control commands"""
        
        self._control.throttle = throttle
        self._control.steer = steer
        self._control.brake = brake
        self._control.hand_brake = False
        self._control.gear = 1 
        self._control.manual_gear_shift = False
        #print(self._control)
        autopilot = False
        self.set_autopilot(autopilot)
        if not autopilot:
            try:
            
                self.vehicle_control_publisher.publish(self._control) #Pub the control
                #print(sim_time_glob)

            except Exception as error:
                self.node.logwarn("Could not send vehicle control: {}".format(error))

        
    
    def set_autopilot(self, enable):
        """
        enable/disable the autopilot
        """
        self.auto_pilot_enable_publisher.publish(Bool(data=enable))

    def exec_waypoint_nav_demo(self):
        """ Executes waypoint navigation demo.
        """


        # Now we load these settings into the server. The server replies
        # with a scene description containing the available start spots for
        # the player. Here we can provide a CarlaSettings object or a
        # CarlaSettings.ini file as string.

        # Refer to the player start folder in the WorldOutliner to see the 
        # player start information
        player_start = PLAYER_START_INDEX

        # Notify the server that we want to start the episode at the
        # player_start index. This function blocks until the server is ready
        # to start the episode.



        #############################################
        # Load Configurations
        #############################################

        # Load configuration file (options.cfg) and then parses for the various
        # options. Here we have two main options:
        # live_plotting and live_plotting_period, which controls whether
        # live plotting is enabled or how often the live plotter updates
        # during the simulation run.
        if PLOTTING == True:
            config = configparser.ConfigParser()
            config.read(os.path.join(
                    os.path.dirname(os.path.realpath(__file__)), 'control/options.cfg'))         
            demo_opt = config['Demo Parameters']

            # Get options
            enable_live_plot = demo_opt.get('live_plotting', 'true').capitalize()
            enable_live_plot = enable_live_plot == 'True'
            live_plot_period = float(demo_opt.get('live_plotting_period', 0))

            # Set options
            live_plot_timer = Timer(live_plot_period)

        #############################################
        # Load Waypoints
        #############################################
        # Opens the waypoint file and stores it to "waypoints"
        # waypoints_file = WAYPOINTS_FILENAME
        # waypoints_np   = None
        # with open(waypoints_file) as waypoints_file_handle:
        #     waypoints = list(csv.reader(waypoints_file_handle, 
        #                                 delimiter=',',
        #                                 quoting=csv.QUOTE_NONNUMERIC))
        #     waypoints_np = np.array(waypoints)

       
        # print(waypoints_np)
        # #print(waypoints, "\n\n\n\n\n\n\n")
        waypoints_file = WAYPOINTS_FILENAME
        waypoints_np   = None
        #with open(waypoints_file) as waypoints_file_handle:
        #	waypoints = list(csv.reader(waypoints_file_handle,delimiter=',',quoting=csv.QUOTE_NONNUMERIC))
        
        #waypoints_np = np.array(waypoints)
        waypoints_np = np.load("/home/carlasim/TesisDD/carla-ros-bridge/catkin_ws/src/shell_simulation/src/waypoints.npy")
        waypoints = list(waypoints_np)
        # print(waypoints_np)
        # Because the waypoints are discrete and our controller performs better
        # with a continuous path, here we will send a subset of the waypoints
        # within some lookahead distance from the closest point to the vehicle.
        # Interpolating between each waypoint will provide a finer resolution
        # path and make it more "continuous". A simple linear interpolation
        # is used as a preliminary method to address this issue, though it is
        # better addressed with better interpolation methods (spline 
        # interpolation, for example). 
        # More appropriate interpolation methods will not be used here for the
        # sake of demonstration on what effects discrete paths can have on
        # the controller. It is made much more obvious with linear
        # interpolation, because in a way part of the path will be continuous
        # while the discontinuous parts (which happens at the waypoints) will 
        # show just what sort of effects these points have on the controller.
        # Can you spot these during the simulation? If so, how can you further
        # reduce these effects?
        
        # Linear interpolation computations
        # Compute a list of distances between waypoints
        wp_distance = []   # distance array
        for i in range(1, waypoints_np.shape[0]):
            wp_distance.append(
                    np.sqrt((waypoints_np[i, 0] - waypoints_np[i-1, 0])**2 +
                            (waypoints_np[i, 1] - waypoints_np[i-1, 1])**2))
        wp_distance.append(0)  # last distance is 0 because it is the distance
                                # from the last waypoint to the last waypoint

        # Linearly interpolate between waypoints and store in a list
        wp_interp      = []    # interpolated values 
                                # (rows = waypoints, columns = [x, y, v])
        wp_interp_hash = []    # hash table which indexes waypoints_np
                                # to the index of the waypoint in wp_interp
        interp_counter = 0     # counter for current interpolated point index
        for i in range(waypoints_np.shape[0] - 1):
            # Add original waypoint to interpolated waypoints list (and append
            # it to the hash table)
            wp_interp.append(list(waypoints_np[i]))
            wp_interp_hash.append(interp_counter)   
            interp_counter+=1
            
            # Interpolate to the next waypoint. First compute the number of
            # points to interpolate based on the desired resolution and
            # incrementally add interpolated points until the next waypoint
            # is about to be reached.
            num_pts_to_interp = int(np.floor(wp_distance[i] /\
                                            float(INTERP_DISTANCE_RES)) - 1)
            wp_vector = waypoints_np[i+1] - waypoints_np[i]
            wp_uvector = wp_vector / np.linalg.norm(wp_vector)
            for j in range(num_pts_to_interp):
                next_wp_vector = INTERP_DISTANCE_RES * float(j+1) * wp_uvector
                wp_interp.append(list(waypoints_np[i] + next_wp_vector))
                interp_counter+=1
        # add last waypoint at the end
        wp_interp.append(list(waypoints_np[-1]))
        wp_interp_hash.append(interp_counter)   
        interp_counter+=1

        #############################################
        # Controller 2D Class Declaration
        #############################################
        # This is where we take the controller2d.py class
        # and apply it to the simulator
        controller = controller2d.Controller2D(waypoints)

        #############################################
        # Determine simulation average timestep (and total frames)
        #############################################
        # Ensure at least one frame is used to compute average timestep
        num_iterations = ITER_FOR_SIM_TIMESTEP
        if (ITER_FOR_SIM_TIMESTEP < 1):
            num_iterations = 1

        # Gather current data from the CARLA server. This is used to get the
        # simulator starting game time. Note that we also need to
        # send a command back to the CARLA server because synchronous mode
        # is enabled.
        #measurement_data, sensor_data = client.read_data()
        sim_start_stamp = sim_time_glob
        #print(sim_time_glob)
        # Send a control command to proceed to next iteration.
        # This mainly applies for simulations that are in synchronous mode.
        self.send_control(throttle=0.0, steer=0, brake=1.0)
        # Computes the average timestep based on several initial iterations
        sim_duration = 0
        for i in range(num_iterations):

        
            self.send_control(throttle=0.0, steer=0, brake=1.0)
            # Last stamp
            if i == num_iterations - 1:
                
                sim_duration = sim_time_glob -\
                                sim_start_stamp  
                sim_duration= 1.          
                #print(sim_duration)
        
        # Outputs average simulation timestep and computes how many frames
        # will elapse before the simulation should end based on various
        # parameters that we set in the beginning.
        SIMULATION_TIME_STEP = sim_duration / float(num_iterations)
        print("SERVER SIMULATION STEP APPROXIMATION: " + \
                str(SIMULATION_TIME_STEP))
        TOTAL_EPISODE_FRAMES = int((TOTAL_RUN_TIME + WAIT_TIME_BEFORE_START) /\
                                SIMULATION_TIME_STEP) + TOTAL_FRAME_BUFFER

        #############################################
        # Frame-by-Frame Iteration and Initialization
        #############################################
        # Store pose history starting from the start position
        start_x, start_y, start_yaw = x_glob, y_glob, yaw_glob
        self.send_control(throttle=0.0, steer=0, brake=1.0)
        x_history     = [start_x]
        y_history     = [start_y]
        yaw_history   = [start_yaw]
        time_history  = [0]
        speed_history = [0]

        #############################################
        # Vehicle Trajectory Live Plotting Setup
        #############################################
        # Uses the live plotter to generate live feedback during the simulation
        # The two feedback includes the trajectory feedback and
        # the controller feedback (which includes the speed tracking).
        
        if PLOTTING==True:
            lp_traj = lv.LivePlotter(tk_title="Trajectory Trace")
            lp_1d = lv.LivePlotter(tk_title="Controls Feedback")
            
            ###
            # Add 2D position / trajectory plot
            ###
            trajectory_fig = lp_traj.plot_new_dynamic_2d_figure(
                    title='Vehicle Trajectory',
                    figsize=(FIGSIZE_X_INCHES, FIGSIZE_Y_INCHES),
                    edgecolor="black",
                    rect=[PLOT_LEFT, PLOT_BOT, PLOT_WIDTH, PLOT_HEIGHT])

            trajectory_fig.set_invert_x_axis() # Because UE4 uses left-handed 
                                                # coordinate system the X
                                                # axis in the graph is flipped
            trajectory_fig.set_axis_equal()    # X-Y spacing should be equal in size

            # Add waypoint markers
            trajectory_fig.add_graph("waypoints", window_size=waypoints_np.shape[0],
                                        x0=waypoints_np[:,0], y0=waypoints_np[:,1],
                                        linestyle="-", marker="", color='g')
            # Add trajectory markers
            trajectory_fig.add_graph("trajectory", window_size=TOTAL_EPISODE_FRAMES,
                                        x0=[start_x]*TOTAL_EPISODE_FRAMES, 
                                        y0=[start_y]*TOTAL_EPISODE_FRAMES,
                                        color=[1, 0.5, 0])
            # Add lookahead path
            trajectory_fig.add_graph("lookahead_path", 
                                        window_size=INTERP_MAX_POINTS_PLOT,
                                        x0=[start_x]*INTERP_MAX_POINTS_PLOT, 
                                        y0=[start_y]*INTERP_MAX_POINTS_PLOT,
                                        color=[0, 0.7, 0.7],
                                        linewidth=4)
            # Add starting position marker
            trajectory_fig.add_graph("start_pos", window_size=1, 
                                        x0=[start_x], y0=[start_y],
                                        marker=11, color=[1, 0.5, 0], 
                                        markertext="Start", marker_text_offset=1)
            # Add end position marker
            trajectory_fig.add_graph("end_pos", window_size=1, 
                                        x0=[waypoints_np[-1, 0]], 
                                        y0=[waypoints_np[-1, 1]],
                                        marker="D", color='r', 
                                        markertext="End", marker_text_offset=1)
            # Add car marker
            trajectory_fig.add_graph("car", window_size=1, 
                                        marker="s", color='b', markertext="Car",
                                        marker_text_offset=1)

            ###
            # Add 1D speed profile updater
            ###
            forward_speed_fig =\
                    lp_1d.plot_new_dynamic_figure(title="Forward Speed (m/s)")
            forward_speed_fig.add_graph("forward_speed", 
                                        label="forward_speed", 
                                        window_size=TOTAL_EPISODE_FRAMES)
            forward_speed_fig.add_graph("reference_signal", 
                                        label="reference_Signal", 
                                        window_size=TOTAL_EPISODE_FRAMES)

            # Add throttle signals graph
            throttle_fig = lp_1d.plot_new_dynamic_figure(title="Throttle")
            throttle_fig.add_graph("throttle", 
                                    label="throttle", 
                                    window_size=TOTAL_EPISODE_FRAMES)
            # Add brake signals graph
            brake_fig = lp_1d.plot_new_dynamic_figure(title="Brake")
            brake_fig.add_graph("brake", 
                                    label="brake", 
                                    window_size=TOTAL_EPISODE_FRAMES)
            # Add steering signals graph
            steer_fig = lp_1d.plot_new_dynamic_figure(title="Steer")
            steer_fig.add_graph("steer", 
                                    label="steer", 
                                    window_size=TOTAL_EPISODE_FRAMES)

            # live plotter is disabled, hide windows
            if not enable_live_plot:
                lp_traj._root.withdraw()
                lp_1d._root.withdraw()        

        


        # Iterate the frames until the end of the waypoints is reached or
        # the TOTAL_EPISODE_FRAMES is reached. The controller simulation then
        # ouptuts the results to the controller output directory.
        reached_the_end = False
        skip_first_frame = True
        closest_index    = 0  # Index of waypoint that is currently closest to
                                # the car (assumed to be the first index)
        closest_distance = 0  # Closest distance of closest waypoint to car
        for frame in range(TOTAL_EPISODE_FRAMES):
            # Gather current data from the CARLA server

            # Update pose, timestamp
            current_x, current_y, current_yaw = x_glob, y_glob, yaw_glob
            current_speed = speed_glob
            current_timestamp = sim_time_glob

            # Wait for some initial time before starting the demo
            if current_timestamp <= WAIT_TIME_BEFORE_START:
                self.send_control(throttle=0.0, steer=0, brake=1.0)
                continue
            else:
                current_timestamp = current_timestamp - WAIT_TIME_BEFORE_START
            
            # Store history
            x_history.append(current_x)
            y_history.append(current_y)
            yaw_history.append(current_yaw)
            speed_history.append(current_speed)
            time_history.append(current_timestamp) 

            ###
            # Controller update (this uses the controller2d.py implementation)
            ###

            # To reduce the amount of waypoints sent to the controller,
            # provide a subset of waypoints that are within some 
            # lookahead distance from the closest point to the car. Provide
            # a set of waypoints behind the car as well.
            
            # Find closest waypoint index to car. First increment the index
            # from the previous index until the new distance calculations
            # are increasing. Apply the same rule decrementing the index.
            # The final index should be the closest point (it is assumed that
            # the car will always break out of instability points where there
            # are two indices with the same minimum distance, as in the
            # center of a circle)
            closest_distance = np.linalg.norm(np.array([
                    waypoints_np[closest_index, 0] - current_x,
                    waypoints_np[closest_index, 1] - current_y]))
            new_distance = closest_distance
            new_index = closest_index
            while new_distance <= closest_distance:
                closest_distance = new_distance
                closest_index = new_index
                new_index += 1
                if new_index >= waypoints_np.shape[0]:  # End of path
                    break
                new_distance = np.linalg.norm(np.array([
                        waypoints_np[new_index, 0] - current_x,
                        waypoints_np[new_index, 1] - current_y]))
            new_distance = closest_distance
            new_index = closest_index
            while new_distance <= closest_distance:
                closest_distance = new_distance
                closest_index = new_index
                new_index -= 1
                if new_index < 0:  # Beginning of path
                    break
                new_distance = np.linalg.norm(np.array([
                        waypoints_np[new_index, 0] - current_x,
                        waypoints_np[new_index, 1] - current_y]))

            # Once the closest index is found, return the path that has 1
            # waypoint behind and X waypoints ahead, where X is the index
            # that has a lookahead distance specified by 
            # INTERP_LOOKAHEAD_DISTANCE
            waypoint_subset_first_index = closest_index - 1
            if waypoint_subset_first_index < 0:
                waypoint_subset_first_index = 0

            waypoint_subset_last_index = closest_index
            total_distance_ahead = 0
            while total_distance_ahead < INTERP_LOOKAHEAD_DISTANCE:
                total_distance_ahead += wp_distance[waypoint_subset_last_index]
                waypoint_subset_last_index += 1
                if waypoint_subset_last_index >= waypoints_np.shape[0]:
                    waypoint_subset_last_index = waypoints_np.shape[0] - 1
                    break

            # Use the first and last waypoint subset indices into the hash
            # table to obtain the first and last indicies for the interpolated
            # list. Update the interpolated waypoints to the controller
            # for the next controller update.
            new_waypoints = \
                    wp_interp[wp_interp_hash[waypoint_subset_first_index]:\
                                wp_interp_hash[waypoint_subset_last_index] + 1]
            controller.update_waypoints(new_waypoints)

            # Update the other controller values and controls
            controller.update_values(current_x, current_y, current_yaw, 
                                        current_speed,
                                        current_timestamp, frame)
            controller.update_controls()
            cmd_throttle, cmd_steer, cmd_brake = controller.get_commands()

            # Skip the first frame (so the controller has proper outputs)
            if skip_first_frame and frame == 0:
                pass
            else:
                #new_waypoints_np = np.array(new_waypoints)
                if PLOTTING==True:
                    # Update live plotter with new feedback
                    trajectory_fig.roll("trajectory", current_x, current_y)
                    trajectory_fig.roll("car", current_x, current_y)
                    # When plotting lookahead path, only plot a number of points
                    # (INTERP_MAX_POINTS_PLOT amount of points). This is meant
                    # to decrease load when live plotting
                    new_waypoints_np = np.array(new_waypoints)
                    path_indices = np.floor(np.linspace(0, 
                                                        new_waypoints_np.shape[0]-1,
                                                        INTERP_MAX_POINTS_PLOT))
                    trajectory_fig.update("lookahead_path", 
                            new_waypoints_np[path_indices.astype(int), 0],
                            new_waypoints_np[path_indices.astype(int), 1],
                            new_colour=[0, 0.7, 0.7])
                    forward_speed_fig.roll("forward_speed", 
                                            current_timestamp, 
                                            current_speed)
                    forward_speed_fig.roll("reference_signal", 
                                            current_timestamp, 
                                            controller._desired_speed)

                    throttle_fig.roll("throttle", current_timestamp, cmd_throttle)
                    brake_fig.roll("brake", current_timestamp, cmd_brake)
                    steer_fig.roll("steer", current_timestamp, cmd_steer)

                    # Refresh the live plot based on the refresh rate 
                    # set by the options
                    if enable_live_plot and \
                        live_plot_timer.has_exceeded_lap_period():
                        lp_traj.refresh()
                        lp_1d.refresh()
                        live_plot_timer.lap()

            # Output controller command to CARLA server
            self.send_control(throttle=cmd_throttle,
                                    steer=cmd_steer,
                                    brake=cmd_brake)

            # Find if reached the end of waypoint. If the car is within
            # DIST_THRESHOLD_TO_LAST_WAYPOINT to the last waypoint,
            # the simulation will end.
            dist_to_last_waypoint = np.linalg.norm(np.array([
                waypoints[-1][0] - current_x,
                waypoints[-1][1] - current_y]))
            if  dist_to_last_waypoint < DIST_THRESHOLD_TO_LAST_WAYPOINT:
                reached_the_end = True
            if reached_the_end:
                break

        # End of demo - Stop vehicle and Store outputs to the controller output
        # directory.
        if reached_the_end:
            print("Reached the end of path. Writing to controller_output...")
        else:
            print("Exceeded assessment time. Writing to controller_output...")
        # Stop the car
        self.send_control( throttle=0.0, steer=0.0, brake=1.0)
        # Store the various outputs
        if PLOTTING==True:
            self.store_trajectory_plot(trajectory_fig.fig, 'trajectory.png')
            self.store_trajectory_plot(forward_speed_fig.fig, 'forward_speed.png')
            self.store_trajectory_plot(throttle_fig.fig, 'throttle_output.png')
            self.store_trajectory_plot(brake_fig.fig, 'brake_output.png')
            self.store_trajectory_plot(steer_fig.fig, 'steer_output.png')
            self.write_trajectory_file(x_history, y_history, speed_history, time_history)
    
    def create_controller_output_dir(self,output_folder):
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

    def store_trajectory_plot(self,graph, fname):
        """ Store the resulting plot."""
        self.create_controller_output_dir(CONTROLLER_OUTPUT_FOLDER)

        file_name = os.path.join(CONTROLLER_OUTPUT_FOLDER, fname)
        graph.savefig(file_name)
    def write_trajectory_file(self,x_list, y_list, v_list, t_list):
        self.create_controller_output_dir(CONTROLLER_OUTPUT_FOLDER)
        file_name = os.path.join(CONTROLLER_OUTPUT_FOLDER, 'trajectory.txt')

        with open(file_name, 'w') as trajectory_file: 
            for i in range(len(x_list)):
                trajectory_file.write('%3.3f, %3.3f, %2.3f, %6.3f\n' %\
                                    (x_list[i], y_list[i], v_list[i], t_list[i]))
    




# ==============================================================================
# -- main() --------------------------------------------------------------------
# ==============================================================================

def main(args=None):
    """
    main function
    """
    roscomp.init("control", args=args)

    # resolution should be similar to spawned camera with role-name 'view'
    resolution = {"width": 800, "height": 600}


    try:
        

        vehicle_node = ShellVehicle()

        executor = roscomp.executors.MultiThreadedExecutor()
        executor.add_node(vehicle_node)

        spin_thread = Thread(target=vehicle_node.spin)
        spin_thread.start()

        while roscomp.ok():
            
            #vehicle_node.controller.send_control(throttle=0.0,steer=0,brake=0.0)
            vehicle_node.controller.exec_waypoint_nav_demo()
    except KeyboardInterrupt:
        roscomp.loginfo("User requested shut down.")
    finally:
        roscomp.shutdown()
        #spin_thread.join()


if __name__ == '__main__':
    main()
